* each manager class must inherit from `pyrin.core.context.Manager class`.

* each component class must inherit from `pyrin.application.context.Component` class and
  also it's respective manager class.

* every access to a package functionality must be done through package's services module,
  not the manager, even if the caller module is resided inside the same package of that manager,
  the only exception is when the caller in the manager itself.

* in each package, the business must be implemented inside the manager, not anywhere else, so
  modules like decorators, error_handlers, services, api should not have any business
  implementation but some brief code that uses the package functionality through
  services module.

* each package should subclass it's own custom exceptions from core exceptions and put them
  inside `exceptions` module. the only type of exception that must be used directly and
  without subclassing is CoreNotImplementedError.

* signature of sibling methods in different layers (manager, services, api, ...) must be the
  same (in 90% of occasions).

* in each package, only the implementation (manager) module should call other packages services,
  so every other module, should only call it's own package services module.

* except some base packages like `application`, `core` and `utils`, the rest of them
  should subclass from Package in their `__init__` module and set the required attributes.

* those type of classes that has a very simple functionality (2 or less methods) should
  be put inside `context` module of each package.

* in handlers packages the base handlers should be put inside `base` module of each package.

* those classes that has lots of functionality (3 or more methods) should be put inside
  a module with the same name as the class itself.

* in each package, all dependencies (from root package itself and from all sub packages)
  must be set in root package's `DEPENDS` attribute.

* in each package, all config stores (from root package itself and from all sub packages)
  must be set in root package's `CONFIG_STORE_NAMES` attribute.

* methods exposed in api modules, and their underlying services and manager methods,
  should always have `**options` in their signature. if any of api methods don't have
  '**options' in their signature, it would cause an error on client call.

* each manager and other classes implementing business, should have their own exception
  class, which underlying business errors will subclass from it.

* utils package of each package should only be referenced from inside of that package
  or subpackages. to make a util globally available, we should implement it
  inside `pyrin.utils` package.

* in each package which extends an already available package, the manager of
  that package must be subclassed from original package's manager class.
  also the package class (inside __init__.py) of that package, must be subclassed
  from original package's package class.

* utils modules should not rely on other packages services. any util that requires this,
  must be moved and implemented inside its own relevant package manager module.

* every manager class that needs to access another package's service inside its own
  '__init__()' method, must add that required package's name into its own package
  'DEPENDS' list. otherwise, it could lead to errors on server startup.
