1. we don't set docstring for built-in functions, unless really necessary.

2. all docstrings and comments must be lowercase, the only exception is for
   specifying object types. example 1.

3. all docstrings and comments must end with a dot. the only exceptions are 
   rtype and returns that should not have a trailing dot. example 1.

4. method docstring pattern for all custom functions (non-built-in)
   are shown in examples 2, 3.

5. in docstrings, all params, keywords, raises, returns and rtypes and the description
   must be grouped by type with a single empty line between each group. and if any of the above
   elements are more than a single line, then there should be an empty line on top and under
   the multi-line element. example 4 shows this nicely.

6. in docstrings for packages and modules and classes we must mention the exact
   package or module or class keyword at the end. example 5.

example 1:
# this variable is for storing http method name of type CoreObject.

example 2:
def function(name, **options):
    """
    sample function.

    :param int name: name parameter.

    :keyword str age: age parameter.
    :keyword list[Car] cars: cars list.
    :type Car: dict(str name: car name,
                    str model: car model).

    :raises RuntimeException: runtime exception.

    :returns: tuple(dict(int code: error code,
                         str message: error message), int code: error code)

    :rtype: tuple(dict, int)
    """

example 3:
def get_deserializers(**options):
    """
    gets all registered deserializers.

    :keyword type for_type: specifies to get serializers which
                            are registered for the input type.
                            if not present, all deserializers will be returned.

    :returns: list[DeserializerBase]

    :rtype: dict
    """

    for_type = options.get('for_type', None)

    if for_type is None:
        return [value for value in __deserializers__.values()]

    # getting all deserializers that are registered for the given type.
    deserializer_keys = [key for key in __deserializers__.keys() if key[1] == for_type]
    return [__deserializers__[key] for key in deserializer_keys]

example 4:
def some_func(param1, param2, param3, param4 ,**options):
    """
    some nice function for http server.

    :param int param1: some integer value.
    :param str param2: some string value.

    :param CoreObject param3: some multi-line.
                              param of CoreObject.

    :param date param4: some date value.

    :keyword int key1: some integer optional value.

    :raises CoreException: core exception.

    :returns: dict(int id: id of someone,
                   str name: name of someone)

    :rtype: dict
"""

example 5:

class Something(CoreObject):
    """
    something class.
    """
